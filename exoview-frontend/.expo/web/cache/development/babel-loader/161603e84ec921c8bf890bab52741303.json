{"ast":null,"code":"\"use strict\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\E\\\\uni\\\\tiea207\\\\exoview\\\\exoview\\\\exoview-frontend\\\\src\\\\components\\\\Stars.js\",\n    _this = this;\n\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar fColor = \"lightblue\";\nvar bColor = \"lightblue\";\nexport default function Stars(_ref) {\n  var star = _ref.star;\n  console.log(star.st_rad);\n  var starSunRel = star.st_rad / 1.0;\n  var bStar = {\n    color: \"\",\n    relativeSize: -1\n  };\n  var fStar = {\n    color: \"\",\n    relativeSize: -1\n  };\n\n  if (starSunRel > 1) {\n    bStar.color = starColor(star.st_teff);\n    bStar.relativeSize = 1.0;\n    fStar.relativeSize = 1 / starSunRel;\n    fStar.color = starColor(5772);\n  } else {\n    bStar.color = starColor(5772);\n    bStar.relativeSize = 1.0;\n    fStar.color = starColor(star.st_teff);\n    fStar.relativeSize = star.st_rad;\n  }\n\n  console.log(bStar.color);\n  return React.createElement(View, {\n    style: {\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      position: 'relative',\n      backgroundColor: bStar.color,\n      height: WW() * bStar.relativeSize,\n      width: WW() * bStar.relativeSize,\n      borderRadius: 1000,\n      borderColor: 'grey',\n      borderWidth: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: {\n      position: 'absolute',\n      backgroundColor: fStar.color,\n      height: WW() * fStar.relativeSize,\n      width: WW() * fStar.relativeSize,\n      borderRadius: 1000,\n      borderColor: 'grey',\n      borderWidth: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }));\n}\n\nfunction starColor(temp) {\n  if (temp < 3500) return \"red\";else if (temp < 5000) return \"orange\";else if (temp < 8000) return \"yellow\";else if (temp < 20000) return \"white\";\n  return \"blue\";\n}\n\nfunction WW() {\n  var ww = Dimensions.get('window').width / 2;\n  return ww;\n}\n\nvar Planet = function Planet(props) {\n  var relativeSize = 1.0;\n  var padding = 0;\n\n  if (props.relative < 1.0 && !props.isEarth) {\n    relativeSize = props.relative;\n    padding = (WW() - WW() * relativeSize) / 2;\n  }\n\n  if (props.relative > 1.0 && props.isEarth) {\n    relativeSize = 1 / props.relative;\n    padding = (WW() - WW() * relativeSize) / 2;\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      height: WW(),\n      paddingTop: padding,\n      backgroundColor: 'rgba(52, 52, 52, 0.0)'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      fontSize: 30 * relativeSize,\n      borderRadius: 1000,\n      backgroundColor: props.color,\n      width: WW() * relativeSize,\n      height: WW() * relativeSize,\n      paddingTop: 55 * relativeSize,\n      textAlign: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["C:/Users/E/uni/tiea207/exoview/exoview/exoview-frontend/src/components/Stars.js"],"names":["React","fColor","bColor","Stars","star","console","log","st_rad","starSunRel","bStar","color","relativeSize","fStar","starColor","st_teff","alignItems","justifyContent","position","backgroundColor","height","WW","width","borderRadius","borderColor","borderWidth","temp","ww","Dimensions","get","Planet","props","padding","relative","isEarth","flex","paddingTop","fontSize","textAlign"],"mappings":"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","sourcesContent":["\"use strict\";\r\nimport React from \"react\";\r\nimport { Text, View, Dimensions } from \"react-native\";\r\n\r\nlet fColor = \"lightblue\";\r\nlet bColor = \"lightblue\";\r\n\r\n\r\n/**\r\n * Piirtää vierekkäin kokovertauksen eksoplaneetan ja maan välillä.\r\n * TODO: Vertaa Jupiteriin jos koko on sitä lähempänä\r\n * @param {*} props\r\n *  name = \"Planeetan nimi\" (string)\r\n *  size = planeetan koko numerona (pl_rade)\r\n */\r\nexport default function Stars({ star }) {\r\n    console.log(star.st_rad)\r\n  /*\r\n  let relativeSize = 1.0;\r\n  exoSize = props.planet.pl_rade;\r\n\r\n  if (isNaN(props.planet.pl_rade)) {\r\n    exoSize = 1.0;\r\n  }\r\n*/\r\n\r\n  const starSunRel = star.st_rad / 1.0;\r\n\r\n  const bStar = {\r\n    color:\"\",\r\n    relativeSize: -1,\r\n  };\r\n\r\n  const fStar = {\r\n    color: \"\",\r\n    relativeSize: -1,\r\n  }\r\n\r\n  if(starSunRel > 1){\r\n    bStar.color = starColor(star.st_teff);\r\n    bStar.relativeSize = 1.0\r\n    fStar.relativeSize = 1 / starSunRel \r\n    fStar.color = starColor(5772);\r\n    //padding = (WW() - (WW() * relativeSize)) / 2;\r\n  }\r\n  else {\r\n      bStar.color = starColor(5772);\r\n      bStar.relativeSize = 1.0\r\n\r\n      fStar.color = starColor(star.st_teff);\r\n      fStar.relativeSize = star.st_rad;\r\n\r\n     // padding = (WW() - (WW() * relativeSize)) / 2;\r\n  }\r\n  \r\n  console.log(bStar.color)\r\n  return (\r\n      <View style={{alignItems: 'center', justifyContent:'center'}}>\r\n        <View style={{ position: 'relative', backgroundColor: bStar.color, height: WW()* bStar.relativeSize, width: WW()*bStar.relativeSize, borderRadius: 1000, borderColor: 'grey', borderWidth:1}}> \r\n        </View>\r\n        {/** front star */}\r\n        <View style={{ position: 'absolute',backgroundColor: fStar.color,  height: WW()* fStar.relativeSize, width: WW()*fStar.relativeSize, borderRadius: 1000, borderColor: 'grey', borderWidth:1}}>\r\n        </View>\r\n      </View>\r\n  )\r\n}\r\n\r\n/**\r\n * \r\n * @param { <Planet relative={relativeSize}></Planet>\r\n      <Planet isEarth={true} relative={relativeSize}></Planet>} temp \r\n            <View style={{ flex: 10,backgroundColor: 'red', height: Dimensions.get('window').width / 2 }}>\r\n          <Text style={{marginHorizontal: 10,}}>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque venenatis tortor id eros bibendum, at sollicitudin ligula maximus. Suspendisse potenti. In feugiat sem in velit iaculis, quis pellentesque purus elementum. Praesent mollis massa sed interdum lacinia. Nullam sed convallis lectus, eget semper ante. Vestibulum fermentum sagittis rhoncus. Integer maximus a sem eget finibus. Aliquam nec felis felis. Nam vitae augue et ligula convallis finibus sit amet vel diam. Nunc pulvinar ullamcorper gravida. Integer sit amet ipsum sit amet nulla faucibus vehicula id et sem. Morbi egestas ultrices lectus ac maximus. Nulla aliquet non erat ac elementum. Nullam odio nisl, feugiat eu lacinia sit amet, lacinia a magna. Fusce massa mauris, rutrum at leo a, tempus eleifend lorem.)</Text>\r\n      </View>\r\n */\r\n\r\nfunction starColor(temp){\r\n    if(temp < 3500) return \"red\";\r\n    else if(temp < 5000) return \"orange\";\r\n    else if(temp < 8000) return \"yellow\";\r\n    else if(temp < 20000) return \"white\";\r\n    return \"blue\";\r\n\r\n}\r\n\r\n\r\n/**\r\n * Ottaa ikkunan leveydestä jonkun murto-osan\r\n */\r\nfunction WW() {\r\n  let ww = Dimensions.get('window').width / 2;\r\n  return ww;\r\n}\r\n\r\n/**\r\n * Tekee sen planeetan\r\n * @param {*} props\r\n *  name = planeetan nimi, ei tarvi antaa jos maa\r\n *  isEarth = boolean true jos maa\r\n *  relative = relativeSize tuolta ylempää ^\r\n */\r\nconst Planet = (props) => {\r\n\r\n  let relativeSize = 1.0;\r\n  let padding = 0;\r\n\r\n  // Jos ei ole maa mutta on sitä pienempi, pienennetään suhteessa vakiokokoon\r\n  if (props.relative < 1.0 && !props.isEarth) {\r\n    relativeSize = props.relative;\r\n    padding = (WW() - (WW() * relativeSize)) / 2;\r\n  }\r\n\r\n  // Jos on maa ja eksoplaneetta on suurempi, otetaan kokosuhteen käänteisluku\r\n  if (props.relative > 1.0 && props.isEarth) {\r\n    relativeSize = 1 / props.relative;\r\n    padding = (WW() - (WW() * relativeSize)) / 2;\r\n  }\r\n\r\n  return (\r\n    <View style={{flex: 1, alignItems: \"center\", height: WW(), paddingTop: padding, backgroundColor: 'rgba(52, 52, 52, 0.0)'}}>\r\n        <View style={\r\n          {\r\n            fontSize: (30  * relativeSize), \r\n            borderRadius: 1000, // random ylisuuri numero\r\n            backgroundColor: props.color, \r\n            width: WW() * relativeSize, \r\n            height: WW() * relativeSize, \r\n            paddingTop: 55 * relativeSize, \r\n            textAlign: 'center'}\r\n          } >\r\n        </View>\r\n      </View>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}