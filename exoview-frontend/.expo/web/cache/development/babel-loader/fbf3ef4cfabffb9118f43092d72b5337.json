{"ast":null,"code":"\"use strict\";\n\nvar _jsxFileName = \"C:\\\\MyTemp\\\\kurssit\\\\projekti\\\\exoview\\\\exoview-frontend\\\\src\\\\components\\\\Planets.js\";\nimport React from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { AntDesign } from '@expo/vector-icons';\nexport default function Stars(_ref) {\n  var planet = _ref.planet,\n      system = _ref.system,\n      navigation = _ref.navigation;\n  console.log(planet.pl_rade);\n  var pEarthRel = planet.pl_rade / 1.0;\n  var bPlanet = {\n    color: \"\",\n    relativeSize: -1\n  };\n  var fPlanet = {\n    color: \"\",\n    relativeSize: -1\n  };\n\n  if (pEarthRel > 1) {\n    bPlanet.color = 'grey';\n    bPlanet.relativeSize = 1.0;\n    fPlanet.relativeSize = 1 / pEarthRel;\n    fPlanet.color = \"darkblue\";\n  } else {\n    bPlanet.color = \"darkblue\";\n    bPlanet.relativeSize = 1.0;\n    fPlanet.color = 'grey';\n    fPlanet.relativeSize = planet.pl_rad;\n  }\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate('Information', {\n        planet: planet,\n        system: system\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: Dimensions.get('window').width / 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      position: 'relative',\n      backgroundColor: bPlanet.color,\n      height: WW() * bPlanet.relativeSize,\n      width: WW() * bPlanet.relativeSize,\n      borderRadius: 1000,\n      borderColor: 'grey',\n      borderWidth: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: {\n      position: 'absolute',\n      backgroundColor: fPlanet.color,\n      height: WW() * fPlanet.relativeSize,\n      width: WW() * fPlanet.relativeSize,\n      borderRadius: 1000,\n      borderColor: 'grey',\n      borderWidth: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }))), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, planet.pl_orbsmax, \" AU\"), React.createElement(Text, {\n    style: {\n      color: 'lightblue',\n      marginRight: 10,\n      textDecorationLine: 'underline'\n    },\n    onPress: function onPress() {\n      Alert.alert(\"Info about \" + planet.pl_name, planet.pl_name + \" has \" + planet.pl_rade + \" radius of earth and \" + planet.pl_masse + \" mass of Earth. \\n                  Its orbit is \" + planet.pl_orbsmax + \" of Earths and revolves arounds its star every days.\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, planet.pl_name, \" \"))));\n}\n\nfunction WW() {\n  var ww = Dimensions.get('window').width / 8;\n  return ww;\n}","map":{"version":3,"sources":["C:/MyTemp/kurssit/projekti/exoview/exoview-frontend/src/components/Planets.js"],"names":["React","AntDesign","Stars","planet","system","navigation","console","log","pl_rade","pEarthRel","bPlanet","color","relativeSize","fPlanet","pl_rad","flexDirection","alignItems","justifyContent","navigate","width","Dimensions","get","position","backgroundColor","height","WW","borderRadius","borderColor","borderWidth","pl_orbsmax","marginRight","textDecorationLine","Alert","alert","pl_name","pl_masse","ww"],"mappings":"AAAA;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAEA,SAASC,SAAT,QAA0B,oBAA1B;AAUA,eAAe,SAASC,KAAT,OAAgD;AAAA,MAA/BC,MAA+B,QAA/BA,MAA+B;AAAA,MAAvBC,MAAuB,QAAvBA,MAAuB;AAAA,MAAdC,UAAc,QAAdA,UAAc;AAC3DC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,OAAnB;AAEF,MAAMC,SAAS,GAAGN,MAAM,CAACK,OAAP,GAAiB,GAAnC;AAEA,MAAME,OAAO,GAAG;AACdC,IAAAA,KAAK,EAAC,EADQ;AAEdC,IAAAA,YAAY,EAAE,CAAC;AAFD,GAAhB;AAKA,MAAMC,OAAO,GAAG;AACdF,IAAAA,KAAK,EAAE,EADO;AAEdC,IAAAA,YAAY,EAAE,CAAC;AAFD,GAAhB;;AAKA,MAAGH,SAAS,GAAG,CAAf,EAAiB;AACfC,IAAAA,OAAO,CAACC,KAAR,GAAgB,MAAhB;AACAD,IAAAA,OAAO,CAACE,YAAR,GAAuB,GAAvB;AACAC,IAAAA,OAAO,CAACD,YAAR,GAAuB,IAAIH,SAA3B;AACAI,IAAAA,OAAO,CAACF,KAAR,GAAgB,UAAhB;AAED,GAND,MAOK;AACDD,IAAAA,OAAO,CAACC,KAAR,GAAgB,UAAhB;AACAD,IAAAA,OAAO,CAACE,YAAR,GAAuB,GAAvB;AACAC,IAAAA,OAAO,CAACF,KAAR,GAAgB,MAAhB;AACAE,IAAAA,OAAO,CAACD,YAAR,GAAuBT,MAAM,CAACW,MAA9B;AAGH;;AAED,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAO,IAAA,KAAK,EAAE;AAACC,MAAAA,aAAa,EAAE,KAAhB;AAAuBC,MAAAA,UAAU,EAAC,QAAlC;AAA4CC,MAAAA,cAAc,EAAE;AAA5D,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,gBAAD;AAAmB,IAAA,OAAO,EAAK;AAAA,aAAMZ,UAAU,CAACa,QAAX,CAAoB,aAApB,EAAmC;AAACf,QAAAA,MAAM,EAAEA,MAAT;AAAgBC,QAAAA,MAAM,EAAEA;AAAxB,OAAnC,CAAN;AAAA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAGY,MAAAA,UAAU,EAAE,QAAf;AAAyBC,MAAAA,cAAc,EAAE,QAAzC;AAAmDE,MAAAA,KAAK,EAACC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAAzB,GAAiC;AAA1F,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEG,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,eAAe,EAAEb,OAAO,CAACC,KAAjD;AAAwDa,MAAAA,MAAM,EAAEC,EAAE,KAAIf,OAAO,CAACE,YAA9E;AAA4FO,MAAAA,KAAK,EAAEM,EAAE,KAAGf,OAAO,CAACE,YAAhH;AAA8Hc,MAAAA,YAAY,EAAE,IAA5I;AAAkJC,MAAAA,WAAW,EAAE,MAA/J;AAAuKC,MAAAA,WAAW,EAAC;AAAnL,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAKE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEN,MAAAA,QAAQ,EAAE,UAAZ;AAAuBC,MAAAA,eAAe,EAAEV,OAAO,CAACF,KAAhD;AAAwDa,MAAAA,MAAM,EAAEC,EAAE,KAAIZ,OAAO,CAACD,YAA9E;AAA4FO,MAAAA,KAAK,EAAEM,EAAE,KAAGZ,OAAO,CAACD,YAAhH;AAA8Hc,MAAAA,YAAY,EAAE,IAA5I;AAAkJC,MAAAA,WAAW,EAAE,MAA/J;AAAuKC,MAAAA,WAAW,EAAC;AAAnL,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADA,CADA,EAWA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACjB,MAAAA,KAAK,EAAC;AAAP,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BR,MAAM,CAAC0B,UAAtC,QADF,EAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAClB,MAAAA,KAAK,EAAC,WAAP;AAAoBmB,MAAAA,WAAW,EAAE,EAAjC;AAAqCC,MAAAA,kBAAkB,EAAE;AAAzD,KAAb;AAAoF,IAAA,OAAO,EAAE,mBAAM;AACpGC,MAAAA,KAAK,CAACC,KAAN,iBAA0B9B,MAAM,CAAC+B,OAAjC,EACc/B,MAAM,CAAC+B,OADrB,aACoC/B,MAAM,CAACK,OAD3C,6BAC0EL,MAAM,CAACgC,QADjF,yDAE0BhC,MAAM,CAAC0B,UAFjC;AAIC,KALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG1B,MAAM,CAAC+B,OALV,MAFF,CAXA,CADF,CADF;AA8BD;;AAKD,SAAST,EAAT,GAAc;AACZ,MAAIW,EAAE,GAAGhB,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAAzB,GAAiC,CAA1C;AACA,SAAOiB,EAAP;AACD","sourcesContent":["\"use strict\";\r\nimport React from \"react\";\r\nimport { TouchableOpacity, View, Dimensions, Text, Alert } from \"react-native\";\r\nimport { AntDesign } from '@expo/vector-icons';\r\n\r\n\r\n/**\r\n * Piirtää vierekkäin kokovertauksen eksoplaneetan ja maan välillä.\r\n * TODO: Vertaa Jupiteriin jos koko on sitä lähempänä\r\n * @param {*} props\r\n *  name = \"Planeetan nimi\" (string)\r\n *  size = planeetan koko numerona (pl_rade)\r\n */\r\nexport default function Stars({ planet, system,  navigation }) {\r\n    console.log(planet.pl_rade)\r\n\r\n  const pEarthRel = planet.pl_rade / 1.0;\r\n\r\n  const bPlanet = {\r\n    color:\"\",\r\n    relativeSize: -1,\r\n  };\r\n\r\n  const fPlanet = {\r\n    color: \"\",\r\n    relativeSize: -1,\r\n  }\r\n\r\n  if(pEarthRel > 1){\r\n    bPlanet.color = 'grey';\r\n    bPlanet.relativeSize = 1.0\r\n    fPlanet.relativeSize = 1 / pEarthRel \r\n    fPlanet.color = \"darkblue\";\r\n    //padding = (WW() - (WW() * relativeSize)) / 2;\r\n  }\r\n  else {\r\n      bPlanet.color = \"darkblue\";\r\n      bPlanet.relativeSize = 1.0\r\n      fPlanet.color = 'grey';\r\n      fPlanet.relativeSize = planet.pl_rad;\r\n\r\n     // padding = (WW() - (WW() * relativeSize)) / 2;\r\n  } \r\n  \r\n  return (\r\n    <View>\r\n      <View  style={{flexDirection: 'row', alignItems:'center', justifyContent: 'center'}}>\r\n      <TouchableOpacity  onPress = { () => navigation.navigate('Information', {planet: planet,system: system})}>\r\n      <View style={{  alignItems: 'center', justifyContent: 'center', width:Dimensions.get('window').width / 2 }}  >\r\n      {/** background star */}\r\n        <View style={{ position: 'relative', backgroundColor: bPlanet.color, height: WW()* bPlanet.relativeSize, width: WW()*bPlanet.relativeSize, borderRadius: 1000, borderColor: 'grey', borderWidth:1}}> \r\n        </View>\r\n        {/** front star */}\r\n        <View style={{ position: 'absolute',backgroundColor: fPlanet.color,  height: WW()* fPlanet.relativeSize, width: WW()*fPlanet.relativeSize, borderRadius: 1000, borderColor: 'grey', borderWidth:1}}>\r\n        </View>\r\n      </View>\r\n    </TouchableOpacity> \r\n      <View >\r\n        <Text style={{color:'white'}}>{planet.pl_orbsmax} AU</Text>\r\n        <Text style={{color:'lightblue', marginRight: 10, textDecorationLine: 'underline'}} onPress={() => {\r\n\t\t\t\t\t\t\tAlert.alert(`Info about ${planet.pl_name}`,\r\n                  `${planet.pl_name} has ${planet.pl_rade} radius of earth and ${planet.pl_masse} mass of Earth. \r\n                  Its orbit is ${planet.pl_orbsmax} of Earths and revolves arounds its star every days.`\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}}>{planet.pl_name} </Text>\r\n \r\n        {/*\r\n               <AntDesign name=\"infocirlce\" size={24} color=\"white\"  />\r\n        <Text style={{color:'white'}}>{planet.pl_name} has {planet.plrade} radius of earth and {planet.pl_masse}\r\n          mass of Earth. Its orbit is {planet.orbsmax} of Earths and revolves arounds its star every {planet.orbper}\r\n        days.</Text> */}\r\n      </View>\r\n      </View>\r\n      </View>)\r\n}\r\n\r\n/**\r\n * Ottaa ikkunan leveydestä jonkun murto-osan\r\n */\r\nfunction WW() {\r\n  let ww = Dimensions.get('window').width / 8;\r\n  return ww;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}