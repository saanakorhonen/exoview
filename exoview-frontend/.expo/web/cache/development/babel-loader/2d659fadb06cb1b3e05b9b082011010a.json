{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\E\\\\uni\\\\tiea207\\\\exoview\\\\exoview\\\\exoview-frontend\\\\src\\\\screens\\\\Information.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { parse } from 'fast-xml-parser';\nimport InfoView from \"../components/InfoView\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport Visualisation from \"../screens/Visualisation\";\nimport Distance from \"../screens/Distance\";\n\nvar Information = function Information(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var screenWidth = Dimensions.get('window').width;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      system = _useState2[0],\n      setSystem = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState({\n    planet: {\n      hostname: '',\n      pl_name: '',\n      pl_rade: '',\n      pl_masse: '',\n      pl_massj: '',\n      pl_radj: '',\n      disc_year: ''\n    }\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      planet = _useState6[0],\n      setPlanet = _useState6[1];\n\n  useEffect(function () {\n    console.log('infossa', route.params);\n\n    if (route.params.planet != undefined) {\n      console.log('infossa', route.params);\n      var p = route.params.planet;\n      setPlanet({\n        planet: {\n          hostname: p.hostname,\n          pl_name: p.pl_name,\n          pl_rade: p.pl_rade,\n          pl_masse: p.pl_masse,\n          pl_massj: p.pl_bmassj,\n          pl_radj: p.pl_radj,\n          pl_orbsmax: p.pl_orbsmax,\n          pl_orbper: p.pl_orbper,\n          pl_orbeccen: p.pl_orbeccen,\n          disc_year: p.disc_year\n        }\n      });\n      setSystem(route.params.system);\n      setLoading(false);\n      return;\n    }\n\n    fetchPlanet(route.params[0]);\n  }, []);\n\n  var fetchPlanet = function fetchPlanet(p) {\n    setPlanet({\n      planet: {\n        hostname: p.hostname,\n        pl_name: p.pl_name,\n        pl_rade: p.pl_rade,\n        pl_masse: p.pl_masse,\n        pl_massj: p.pl_bmassj,\n        pl_radj: p.pl_radj,\n        pl_orbsmax: p.pl_orbsmax,\n        pl_orbper: p.pl_orbper,\n        pl_orbeccen: p.pl_orbeccen,\n        disc_year: p.disc_year\n      }\n    });\n  };\n\n  useEffect(function () {\n    var nimi = planet.planet.pl_name;\n    var kutsu = \"https://exoplanetarchive.ipac.caltech.edu/TAP/sync?query=select+top+1+st_spectype,st_teff,st_rad,st_mass,st_age,st_rotp+from+pscomppars+where+pl_name+like+\\'\" + nimi + \"\\'+order+by+disc_year+desc\";\n    fetchData(kutsu).then(function (data) {\n      console.log(data);\n      var star = setStars(data, planet.planet.hostname);\n      console.log(\"t√§hti infossa\", star);\n      var tahdenplaneetat = route.params.filter(function (planet) {\n        return planet['hostname'].match(star.hostname);\n      });\n      var system = {\n        star: star,\n        planets: tahdenplaneetat\n      };\n      setSystem(system);\n      setLoading(false);\n    });\n  }, [planet]);\n\n  var fetchData = function fetchData(props) {\n    var response, teksti, objects, planetArray;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(props));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 5:\n            teksti = _context.sent;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(parse(teksti));\n\n          case 8:\n            objects = _context.sent;\n            planetArray = objects.VOTABLE.RESOURCE.TABLE.DATA.TABLEDATA.TR;\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var success = planetArray != undefined;\n              success ? resolve(planetArray) : reject('Query failed');\n            }));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var setStars = function setStars(arr, data) {\n    var star = arr.TD;\n    var propPlanet = {\n      hostname: data,\n      st_spectype: star[0],\n      st_teff: star[1],\n      st_rad: star[2],\n      st_mass: star[3],\n      st_age: star[4],\n      st_rotp: star[5]\n    };\n    return propPlanet;\n  };\n\n  console.log('systeminfossa', system);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, loading ? React.createElement(ImageBackground, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'flex-end'\n    },\n    source: require(\"../../assets/exoView_opening_pic.png\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 10\n    }\n  }, React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: \"rgba(255,255,255, 0.4)\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }), React.createElement(Text, {\n    style: {\n      padding: 10,\n      marginBottom: 50,\n      color: 'rgba(255,255,255, 0.4)'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, \"Loading\"), React.createElement(Text, {\n    style: {\n      padding: 10,\n      color: 'rgba(255,255,255, 0.2)'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, \"Eksolaakson tarinoita 2020\")) : React.createElement(ScrollView, {\n    horizontal: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      width: screenWidth\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: styles.nameBox,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }, planet.planet.pl_name)), React.createElement(View, {\n    style: styles.infoBox,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, React.createElement(InfoView, {\n    data: planet.planet,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.visualisationButton,\n    onPress: function onPress() {\n      return navigation.navigate('StarSystem', system);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, \"Starsystem view\")))), React.createElement(View, {\n    style: {\n      flex: 1,\n      width: screenWidth,\n      marginRight: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, React.createElement(Visualisation, {\n    planet: planet.planet,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: {\n      width: screenWidth\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, React.createElement(Distance, {\n    eplanet: planet.planet,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0E1D32'\n  },\n  nameBox: {\n    flex: 0.2,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(82, 113, 255, 0.7)',\n    borderWidth: 1,\n    borderBottomLeftRadius: 30,\n    borderBottomRightRadius: 30\n  },\n  infoBox: {\n    flex: 0.75\n  },\n  name: {\n    fontSize: 23,\n    fontWeight: 'bold',\n    color: '#ffff'\n  },\n  visualisationButton: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    backgroundColor: 'rgba(82, 113, 255, 0.7)',\n    padding: 20,\n    marginHorizontal: 10,\n    marginTop: 10\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 18\n  }\n});\n{}\nexport default Information;","map":{"version":3,"sources":["C:/Users/E/uni/tiea207/exoview/exoview/exoview-frontend/src/screens/Information.js"],"names":["React","useState","useEffect","parse","InfoView","ScrollView","Visualisation","Distance","Information","navigation","route","screenWidth","Dimensions","get","width","system","setSystem","loading","setLoading","planet","hostname","pl_name","pl_rade","pl_masse","pl_massj","pl_radj","disc_year","setPlanet","console","log","params","undefined","p","pl_bmassj","pl_orbsmax","pl_orbper","pl_orbeccen","fetchPlanet","nimi","kutsu","fetchData","then","data","star","setStars","tahdenplaneetat","filter","match","planets","props","fetch","response","text","teksti","objects","planetArray","VOTABLE","RESOURCE","TABLE","DATA","TABLEDATA","TR","Promise","resolve","reject","success","arr","TD","propPlanet","st_spectype","st_teff","st_rad","st_mass","st_age","st_rotp","styles","container","flex","alignItems","justifyContent","require","padding","marginBottom","color","nameBox","name","infoBox","visualisationButton","navigate","buttonText","marginRight","StyleSheet","create","backgroundColor","flexDirection","borderWidth","borderBottomLeftRadius","borderBottomRightRadius","fontSize","fontWeight","marginHorizontal","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { ImageBackground, ActivityIndicator, StyleSheet, View, Text, TouchableOpacity, Dimensions,  } from 'react-native'\r\n//import { MaterialIcons } from '@expo/vector-icons';\r\nimport { parse } from 'fast-xml-parser';\r\nimport InfoView from '../components/InfoView';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\nimport Visualisation from '../screens/Visualisation'\r\nimport Distance from '../screens/Distance'\r\n\r\nconst Information = ({ navigation, route }) => {\r\n  const screenWidth = Dimensions.get('window').width\r\n  const [system, setSystem] = useState()\r\n  const [loading, setLoading] = useState(true)\r\n  // alussa tyhj√§ alustus\r\n  const [planet, setPlanet] = useState({\r\n    planet: {\r\n      hostname: '',\r\n      pl_name: '',\r\n      pl_rade: '',\r\n      pl_masse: '',\r\n      pl_massj: '',\r\n      pl_radj:'',\r\n      disc_year: ''\r\n    },\r\n  })\r\n\r\n  useEffect(() => {\r\n    console.log('infossa',route.params)\r\n    if (route.params.planet !=undefined) {\r\n      console.log('infossa',route.params)\r\n      const p = route.params.planet\r\n      \r\n      setPlanet({ planet: { hostname: p.hostname, pl_name: p.pl_name, pl_rade: p.pl_rade, pl_masse: p.pl_masse, pl_massj: p.pl_bmassj, pl_radj: p.pl_radj, pl_orbsmax: p.pl_orbsmax, pl_orbper: p.pl_orbper, pl_orbeccen: p.pl_orbeccen, disc_year: p.disc_year }})\r\n      setSystem(route.params.system)\r\n      setLoading(false)\r\n      return\r\n    }\r\n    fetchPlanet(route.params[0]);\r\n  },[])\r\n\r\n  // haetaan 1 planeetan tiedot\r\n  const fetchPlanet = (p) => {\r\n    //const res = await fetch('https://exoplanetarchive.ipac.caltech.edu/TAP/sync?query=select+top+1+hostname,pl_name,pl_rade,pl_bmasse,pl_bmassj,pl_radj,pl_orbsmax,pl_orbper,pl_orbeccen,disc_year+from+pscomppars+where+disc_year+=+2020')\r\n    //const teksti = await res.text()\r\n    //const obj = await parse(teksti)\r\n    // varsinainen haluttu data taulukkossa\r\n\r\n    // asetetaan planeetan tiedot\r\n    setPlanet({ planet: { hostname: p.hostname, pl_name: p.pl_name, pl_rade: p.pl_rade, pl_masse: p.pl_masse, pl_massj: p.pl_bmassj, pl_radj: p.pl_radj, pl_orbsmax: p.pl_orbsmax, pl_orbper: p.pl_orbper, pl_orbeccen: p.pl_orbeccen, disc_year: p.disc_year }})  \r\n  }\r\n\r\n  useEffect(() => {\r\n    var nimi = planet.planet.pl_name;\r\n    //console.log('nimi', nimi)\r\n    var kutsu = \"https://exoplanetarchive.ipac.caltech.edu/TAP/sync?query=select+top+1+st_spectype,st_teff,st_rad,st_mass,st_age,st_rotp+from+pscomppars+where+pl_name+like+\\'\"+nimi+\"\\'+order+by+disc_year+desc\";\r\n    fetchData(kutsu)\r\n    .then((data) =>{\r\n      console.log(data)\r\n        var star = setStars(data,planet.planet.hostname)\r\n        console.log(\"t√§hti infossa\",star)\r\n        var tahdenplaneetat = route.params.filter(planet => planet['hostname'].match(star.hostname))\r\n        const system = {star: star, planets: tahdenplaneetat}   \r\n        setSystem(system)\r\n        setLoading(false)\r\n    })\r\n  }, [planet])\r\n\r\n  const fetchData = async ( props ) => {\r\n    const response = await fetch(props);\r\n\r\n    const teksti = await response.text();\r\n    const objects = await parse(teksti);\r\n\r\n    const planetArray = objects.VOTABLE.RESOURCE.TABLE.DATA.TABLEDATA.TR;\r\n    return new Promise((resolve, reject) => {\r\n        var success = planetArray != undefined;\r\n        success ? resolve(planetArray) : reject('Query failed');\r\n    })\r\n}\r\n      const setStars = (arr,data) => {\r\n        const star = arr.TD\r\n        const propPlanet =\r\n            {\r\n                hostname: data,\r\n                st_spectype: star[0],\r\n                st_teff: star[1],\r\n                st_rad: star[2],\r\n                st_mass: star[3],\r\n                st_age: star[4],\r\n                st_rotp: star[5]\r\n            }\r\n        return propPlanet\r\n    }\r\n    console.log('systeminfossa', system)\r\n  return (\r\n    <View style={styles.container}>\r\n      {loading\r\n       ? <ImageBackground style={{flex: 1, alignItems: 'center', justifyContent:'flex-end'}} source={require('../../assets/exoView_opening_pic.png')}>\r\n          <ActivityIndicator size='large' color='rgba(255,255,255, 0.4)' />\r\n          <Text style={{padding: 10, marginBottom: 50, color:'rgba(255,255,255, 0.4)'}}>Loading</Text>\r\n          <Text style={{padding: 10,color:'rgba(255,255,255, 0.2)'}}>Eksolaakson tarinoita 2020</Text>\r\n        </ImageBackground>\r\n       :(\r\n      <ScrollView\r\n        horizontal={true}>\r\n          <View style={{ width: screenWidth}}>\r\n            <View style={styles.nameBox}>\r\n              <Text style={styles.name}>{planet.planet.pl_name}</Text>\r\n            </View>\r\n            <View style={styles.infoBox}>\r\n           {/**detaljeet, informaatio datat */}\r\n              <InfoView data={planet.planet}/>\r\n              <TouchableOpacity  style ={styles.visualisationButton} onPress = { () => navigation.navigate('StarSystem', system) }>\r\n                <Text style={styles.buttonText}>Starsystem view</Text>\r\n              </TouchableOpacity>\r\n            </View >\r\n        </View>\r\n        <View style={{ flex: 1, width: screenWidth, marginRight: 10}}>\r\n          <Visualisation planet={planet.planet} />\r\n        </View>\r\n        <View style={{ width: screenWidth}}>\r\n          <Distance eplanet={planet.planet} />\r\n        </View>\r\n      </ScrollView>\r\n      )}\r\n\r\n    </View>   \r\n  )\r\n\r\n}\r\n\r\n//TODO: siisti!\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#0E1D32',\r\n  },\r\n  nameBox: {\r\n    flex: 0.2,\r\n    flexDirection:'row',\r\n    justifyContent:'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'rgba(82, 113, 255, 0.7)',\r\n    borderWidth:1,\r\n    borderBottomLeftRadius: 30,\r\n    borderBottomRightRadius:30\r\n  },\r\n  infoBox: {\r\n    flex: 0.75,\r\n  }, \r\n  name: {\r\n    fontSize: 23,\r\n    fontWeight: 'bold',\r\n    color: '#ffff',\r\n  },\r\n  visualisationButton: {\r\n    flexDirection: 'row',\r\n    justifyContent:'center',\r\n    backgroundColor:'rgba(82, 113, 255, 0.7)',\r\n    padding: 20,\r\n    marginHorizontal: 10,\r\n    marginTop: 10,\r\n  },\r\n  buttonText:{\r\n    color:'white',\r\n    //fontWeight:'bold',\r\n    fontSize: 18\r\n  }\r\n})\r\n\r\n        \r\n         {/**navigoidaan visualisaatioihin \r\n          *           <View style={styles.visualisationButton}>\r\n            </View>\r\n          <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('Visualisation',planet)}>\r\n            <Text style={{color: '#fff'}}>Open visualisation</Text>\r\n          </TouchableOpacity>\r\n          <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('Distance',planet)}>\r\n            <Text style={{color: '#fff'}}>Open visualisation</Text>\r\n          </TouchableOpacity> */}\r\n\r\nexport default Information;"]},"metadata":{},"sourceType":"module"}