{"ast":null,"code":"\"use strict\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\E\\\\uni\\\\tiea207\\\\exoview\\\\exoview\\\\exoview-frontend\\\\src\\\\components\\\\Stars.js\";\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nvar fColor = \"lightblue\";\nvar bColor = \"lightblue\";\nexport default function Stars(_ref) {\n  var star = _ref.star;\n  console.log(star.st_rad);\n  var starSunRel = star.st_rad / 1.0;\n  var bStar = {\n    name: \"\",\n    color: \"\",\n    teff: '',\n    relativeSize: -1\n  };\n  var fStar = {\n    name: '',\n    color: \"\",\n    teff: '',\n    relativeSize: -1\n  };\n\n  if (starSunRel > 1) {\n    bStar.color = starColor(star.st_teff);\n    bStar.relativeSize = 1.0;\n    bStar.name = star.hostname;\n    bStar.teff = star.st_teff;\n    fStar.relativeSize = 1 / starSunRel;\n    fStar.color = starColor(5772);\n    fStar.name = 'Sun';\n    fStar.teff = 5772;\n  } else {\n    bStar.color = starColor(5772);\n    bStar.relativeSize = 1.0;\n    bStar.name = 'Sun';\n    bStar.teff = 5772;\n    fStar.color = starColor(star.st_teff);\n    fStar.relativeSize = star.st_rad;\n    fStar.name = star.hostname;\n    fStar.teff = star.st_teff;\n  }\n\n  console.log(bStar.color);\n  return React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      position: 'relative',\n      backgroundColor: bStar.color,\n      height: WW() * bStar.relativeSize,\n      width: WW() * bStar.relativeSize,\n      borderRadius: 1000,\n      borderColor: 'grey',\n      borderWidth: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: {\n      position: 'absolute',\n      backgroundColor: fStar.color,\n      height: WW() * fStar.relativeSize,\n      width: WW() * fStar.relativeSize,\n      borderRadius: 1000,\n      borderColor: 'grey',\n      borderWidth: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: {\n      flex: 1,\n      height: Dimensions.get('window').width / 2,\n      marginHorizontal: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, star.hostname), React.createElement(Text, {\n    style: styles.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, \"The Star shown behind is \", bStar.name, \". It's stellar effective temperature is \", bStar.teff, \" K. The star infront is \", fStar.name, \" and it's stellar effective temperature is \", fStar.teff)));\n}\n\nfunction starColor(temp) {\n  if (temp < 3500) return \"red\";else if (temp < 5000) return \"orange\";else if (temp < 8000) return \"yellow\";else if (temp < 20000) return \"white\";\n  return \"blue\";\n}\n\nfunction WW() {\n  var ww = Dimensions.get('window').width / 2;\n  return ww;\n}\n\nvar styles = StyleSheet.create({\n  paragraph: {\n    color: 'white'\n  },\n  title: {\n    color: 'white',\n    fontSize: 20,\n    fontWeight: '700'\n  }\n});","map":{"version":3,"sources":["C:/Users/E/uni/tiea207/exoview/exoview/exoview-frontend/src/components/Stars.js"],"names":["React","fColor","bColor","Stars","star","console","log","st_rad","starSunRel","bStar","name","color","teff","relativeSize","fStar","starColor","st_teff","hostname","flexDirection","alignItems","justifyContent","position","backgroundColor","height","WW","width","borderRadius","borderColor","borderWidth","flex","Dimensions","get","marginHorizontal","styles","title","paragraph","temp","ww","StyleSheet","create","fontSize","fontWeight"],"mappings":"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","sourcesContent":["\"use strict\";\r\nimport React from \"react\";\r\nimport { Text, View, Dimensions, StyleSheet } from \"react-native\";\r\n\r\nlet fColor = \"lightblue\";\r\nlet bColor = \"lightblue\";\r\n\r\n\r\n/**\r\n * Piirtää vierekkäin kokovertauksen eksoplaneetan ja maan välillä.\r\n * TODO: Vertaa Jupiteriin jos koko on sitä lähempänä\r\n * @param {*} props\r\n *  name = \"Planeetan nimi\" (string)\r\n *  size = planeetan koko numerona (pl_rade)\r\n */\r\nexport default function Stars({ star }) {\r\n    console.log(star.st_rad)\r\n  /*\r\n  let relativeSize = 1.0;\r\n  exoSize = props.planet.pl_rade;\r\n\r\n  if (isNaN(props.planet.pl_rade)) {\r\n    exoSize = 1.0;\r\n  }\r\n*/\r\n\r\n  const starSunRel = star.st_rad / 1.0;\r\n\r\n  const bStar = {\r\n    name:\"\",\r\n    color:\"\",\r\n    teff:'',\r\n    relativeSize: -1,\r\n  };\r\n\r\n  const fStar = {\r\n    name:'',\r\n    color: \"\",\r\n    teff:'',\r\n    relativeSize: -1,\r\n  }\r\n\r\n  if(starSunRel > 1){\r\n    bStar.color = starColor(star.st_teff);\r\n    bStar.relativeSize = 1.0\r\n    bStar.name = star.hostname\r\n    bStar.teff = star.st_teff\r\n\r\n    fStar.relativeSize = 1 / starSunRel \r\n    fStar.color = starColor(5772);\r\n    fStar.name = 'Sun'\r\n    fStar.teff = 5772\r\n    //padding = (WW() - (WW() * relativeSize)) / 2;\r\n  }\r\n  else {\r\n      bStar.color = starColor(5772);\r\n      bStar.relativeSize = 1.0\r\n      bStar.name = 'Sun'\r\n      bStar.teff= 5772\r\n\r\n      fStar.color = starColor(star.st_teff);\r\n      fStar.relativeSize = star.st_rad;\r\n      fStar.name = star.hostname\r\n      fStar.teff = star.st_teff\r\n\r\n     // padding = (WW() - (WW() * relativeSize)) / 2;\r\n  }\r\n  \r\n  console.log(bStar.color)\r\n  return (\r\n      <View style={{flexDirection:'row'}}>\r\n        <View style={{alignItems: 'center', justifyContent:'center'}}>\r\n        <View style={{ position: 'relative', backgroundColor: bStar.color, height: WW()* bStar.relativeSize, width: WW()*bStar.relativeSize, borderRadius: 1000, borderColor: 'grey', borderWidth:1}}> \r\n        </View>\r\n        {/** front star */}\r\n        <View style={{ position: 'absolute',backgroundColor: fStar.color,  height: WW()* fStar.relativeSize, width: WW()*fStar.relativeSize, borderRadius: 1000, borderColor: 'grey', borderWidth:1}}>\r\n        </View>\r\n        </View>\r\n        <View style={{flex:1, height:Dimensions.get('window').width / 2, marginHorizontal: 10}}>\r\n          <Text style={styles.title}>{star.hostname}</Text>\r\n          <Text style={styles.paragraph}>The Star shown behind is {bStar.name}. It's stellar effective temperature is {bStar.teff} K.\r\n          The star infront is {fStar.name} and it's stellar effective temperature is {fStar.teff}</Text>\r\n        </View>\r\n      </View>\r\n  )\r\n}\r\n\r\n/**\r\n * \r\n * @param { <Planet relative={relativeSize}></Planet>\r\n*/\r\nfunction starColor(temp){\r\n    if(temp < 3500) return \"red\";\r\n    else if(temp < 5000) return \"orange\";\r\n    else if(temp < 8000) return \"yellow\";\r\n    else if(temp < 20000) return \"white\";\r\n    return \"blue\";\r\n\r\n}\r\n\r\n\r\n/**\r\n * Ottaa ikkunan leveydestä jonkun murto-osan\r\n */\r\nfunction WW() {\r\n  let ww = Dimensions.get('window').width / 2;\r\n  return ww;\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  paragraph: {\r\n    color: 'white',\r\n\r\n  },\r\n  title:{\r\n    color:'white',\r\n    fontSize: 20,\r\n    fontWeight: '700'\r\n  }\r\n}\r\n\r\n)\r\n\r\n"]},"metadata":{},"sourceType":"module"}