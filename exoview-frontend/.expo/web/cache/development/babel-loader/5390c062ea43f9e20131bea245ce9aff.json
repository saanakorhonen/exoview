{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\MyTemp\\\\kurssit\\\\projekti\\\\exoview\\\\exoview-frontend\\\\src\\\\screens\\\\Information.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { parse } from 'fast-xml-parser';\nimport InfoView from \"../components/InfoView\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport Visualisation from \"../screens/Visualisation\";\nimport Distance from \"../screens/Distance\";\n\nvar Information = function Information(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var screenWidth = Dimensions.get('window').width;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      system = _useState2[0],\n      setSystem = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      planets = _useState4[0],\n      setPlanets = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      planetsSet = _useState8[0],\n      setPlanetsSet = _useState8[1];\n\n  var _useState9 = useState({\n    planet: {\n      hostname: '',\n      pl_name: '',\n      pl_rade: '',\n      pl_masse: '',\n      pl_massj: '',\n      pl_radj: '',\n      disc_year: ''\n    }\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      planet = _useState10[0],\n      setPlanet = _useState10[1];\n\n  useEffect(function () {\n    console.log(route.params);\n\n    if (route.params.planet != undefined) {\n      console.log('infossa useEffect if', route.params);\n      var _p = route.params.planet;\n      setPlanet({\n        planet: {\n          hostname: _p.hostname,\n          pl_name: _p.pl_name,\n          pl_rade: _p.pl_rade,\n          pl_masse: _p.pl_masse,\n          pl_massj: _p.pl_bmassj,\n          pl_radj: _p.pl_radj,\n          pl_orbsmax: _p.pl_orbsmax,\n          pl_orbper: _p.pl_orbper,\n          pl_orbeccen: _p.pl_orbeccen,\n          disc_year: _p.disc_year\n        }\n      });\n      setSystem(route.params.system);\n      setLoading(false);\n      return;\n    }\n\n    var p = route.params[0];\n    setPlanets(route.params);\n    setPlanet({\n      planet: {\n        hostname: p.hostname,\n        pl_name: p.pl_name,\n        pl_rade: p.pl_rade,\n        pl_masse: p.pl_masse,\n        pl_massj: p.pl_bmassj,\n        pl_radj: p.pl_radj,\n        pl_orbsmax: p.pl_orbsmax,\n        pl_orbper: p.pl_orbper,\n        pl_orbeccen: p.pl_orbeccen,\n        disc_year: p.disc_year\n      }\n    });\n    setPlanetsSet(true);\n  }, []);\n  useEffect(function () {\n    var nimi = planet.planet.pl_name;\n    var kutsu = \"https://exoplanetarchive.ipac.caltech.edu/TAP/sync?query=select+top+1+st_spectype,st_teff,st_rad,st_mass,st_age,st_rotp+from+pscomppars+where+pl_name+like+\\'\" + nimi + \"\\'+order+by+disc_year+desc\";\n    fetchData(kutsu).then(function (data) {\n      var star = setStars(data, planet.planet.hostname);\n      var tahdenplaneetat = planets.filter(function (planet) {\n        return planet['hostname'].match(star.hostname);\n      });\n      var system = {\n        star: star,\n        planets: tahdenplaneetat\n      };\n      setSystem(system);\n      setLoading(false);\n    }).catch(function (error) {\n      return console.log('error fetcData');\n    });\n  }, [planetsSet]);\n\n  var fetchData = function fetchData(props) {\n    var response, teksti, objects, planetArray;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(props));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 5:\n            teksti = _context.sent;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(parse(teksti));\n\n          case 8:\n            objects = _context.sent;\n            planetArray = objects.VOTABLE.RESOURCE.TABLE.DATA.TABLEDATA.TR;\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var success = planetArray != undefined;\n              success ? resolve(planetArray) : reject('Query failed');\n            }));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var setStars = function setStars(arr, data) {\n    var star = arr.TD;\n    var propPlanet = {\n      hostname: data,\n      st_spectype: star[0],\n      st_teff: star[1],\n      st_rad: star[2],\n      st_mass: star[3],\n      st_age: star[4],\n      st_rotp: star[5]\n    };\n    return propPlanet;\n  };\n\n  console.log('info systeemi', system);\n  return React.createElement(ImageBackground, {\n    style: styles.container,\n    source: require(\"../../assets/background.png\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, loading ? React.createElement(ImageBackground, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'flex-end'\n    },\n    source: require(\"../../assets/exoView_opening_pic.png\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 10\n    }\n  }, React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: \"rgba(255,255,255, 0.4)\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }), React.createElement(Text, {\n    style: {\n      padding: 10,\n      marginBottom: 50,\n      color: 'rgba(255,255,255, 0.4)'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, \"Loading\"), React.createElement(Text, {\n    style: {\n      padding: 10,\n      color: 'rgba(255,255,255, 0.2)'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"Eksolaakson tarinoita 2020\")) : React.createElement(ScrollView, {\n    horizontal: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      width: screenWidth\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: styles.nameBox,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, planet.planet.pl_name)), React.createElement(View, {\n    style: styles.infoBox,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, React.createElement(InfoView, {\n    data: planet.planet,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.visualisationButton,\n    onPress: function onPress() {\n      return navigation.navigate('StarSystem', system);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, \"Starsystem view\")))), React.createElement(View, {\n    style: {\n      flex: 1,\n      width: screenWidth,\n      marginRight: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, React.createElement(Visualisation, {\n    planet: planet.planet,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: {\n      width: screenWidth\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, React.createElement(Distance, {\n    eplanet: planet.planet,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  })))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  nameBox: {\n    flex: 0.2,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(82, 113, 255, 0.5)',\n    borderWidth: 1,\n    borderBottomLeftRadius: 30,\n    borderBottomRightRadius: 30\n  },\n  infoBox: {\n    flex: 0.75\n  },\n  name: {\n    fontSize: 23,\n    fontWeight: 'bold',\n    color: '#ffff'\n  },\n  visualisationButton: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    backgroundColor: 'rgba(82, 113, 255, 0.5)',\n    padding: 20,\n    marginHorizontal: 10,\n    marginTop: 10\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 18\n  }\n});\nexport default Information;","map":{"version":3,"sources":["C:/MyTemp/kurssit/projekti/exoview/exoview-frontend/src/screens/Information.js"],"names":["React","useState","useEffect","parse","InfoView","ScrollView","Visualisation","Distance","Information","navigation","route","screenWidth","Dimensions","get","width","system","setSystem","planets","setPlanets","loading","setLoading","planetsSet","setPlanetsSet","planet","hostname","pl_name","pl_rade","pl_masse","pl_massj","pl_radj","disc_year","setPlanet","console","log","params","undefined","p","pl_bmassj","pl_orbsmax","pl_orbper","pl_orbeccen","nimi","kutsu","fetchData","then","data","star","setStars","tahdenplaneetat","filter","match","catch","error","props","fetch","response","text","teksti","objects","planetArray","VOTABLE","RESOURCE","TABLE","DATA","TABLEDATA","TR","Promise","resolve","reject","success","arr","TD","propPlanet","st_spectype","st_teff","st_rad","st_mass","st_age","st_rotp","styles","container","require","flex","alignItems","justifyContent","padding","marginBottom","color","nameBox","name","infoBox","visualisationButton","navigate","buttonText","marginRight","StyleSheet","create","flexDirection","backgroundColor","borderWidth","borderBottomLeftRadius","borderBottomRightRadius","fontSize","fontWeight","marginHorizontal","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { ImageBackground, ActivityIndicator, StyleSheet, View, Text, TouchableOpacity, Dimensions,  } from 'react-native'\r\n//import { MaterialIcons } from '@expo/vector-icons';\r\nimport { parse } from 'fast-xml-parser';\r\nimport InfoView from '../components/InfoView';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\nimport Visualisation from '../screens/Visualisation'\r\nimport Distance from '../screens/Distance'\r\n\r\nconst Information = ({ navigation, route }) => {\r\n  const screenWidth = Dimensions.get('window').width\r\n  const [system, setSystem] = useState()\r\n  const [planets, setPlanets] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [planetsSet, setPlanetsSet] = useState(false)\r\n  // alussa tyhjä alustus\r\n  const [planet, setPlanet] = useState({\r\n    planet: {\r\n      hostname: '',\r\n      pl_name: '',\r\n      pl_rade: '',\r\n      pl_masse: '',\r\n      pl_massj: '',\r\n      pl_radj:'',\r\n      disc_year: ''\r\n    },\r\n  })\r\n\r\n  useEffect(() => {\r\n    console.log(route.params)\r\n    if (route.params.planet !=undefined) {\r\n      console.log('infossa useEffect if',route.params)\r\n      const p = route.params.planet\r\n      setPlanet({ planet: { hostname: p.hostname, pl_name: p.pl_name, pl_rade: p.pl_rade, pl_masse: p.pl_masse, pl_massj: p.pl_bmassj, pl_radj: p.pl_radj, pl_orbsmax: p.pl_orbsmax, pl_orbper: p.pl_orbper, pl_orbeccen: p.pl_orbeccen, disc_year: p.disc_year }})\r\n      setSystem(route.params.system)\r\n      setLoading(false)\r\n      return\r\n    }\r\n    const p = route.params[0]\r\n    setPlanets(route.params)\r\n    setPlanet({ planet: { hostname: p.hostname, pl_name: p.pl_name, pl_rade: p.pl_rade, pl_masse: p.pl_masse, pl_massj: p.pl_bmassj, pl_radj: p.pl_radj, pl_orbsmax: p.pl_orbsmax, pl_orbper: p.pl_orbper, pl_orbeccen: p.pl_orbeccen, disc_year: p.disc_year }})  \r\n    setPlanetsSet(true)\r\n  },[])\r\n  \r\n  useEffect(() => {\r\n    const nimi = planet.planet.pl_name;\r\n    const kutsu = \"https://exoplanetarchive.ipac.caltech.edu/TAP/sync?query=select+top+1+st_spectype,st_teff,st_rad,st_mass,st_age,st_rotp+from+pscomppars+where+pl_name+like+\\'\"+nimi+\"\\'+order+by+disc_year+desc\";\r\n    fetchData(kutsu)\r\n    .then((data) =>{\r\n        var star = setStars(data,planet.planet.hostname)\r\n        var tahdenplaneetat = planets.filter(planet => planet['hostname'].match(star.hostname))\r\n        const system = {star: star, planets: tahdenplaneetat}   \r\n        setSystem(system)\r\n        setLoading(false)\r\n    }).catch((error) => console.log('error fetcData')) \r\n\r\n  }, [planetsSet])\r\n\r\n  const fetchData = async ( props ) => {\r\n    const response = await fetch(props);\r\n    const teksti = await response.text();\r\n    const objects = await parse(teksti);\r\n    const planetArray = objects.VOTABLE.RESOURCE.TABLE.DATA.TABLEDATA.TR;\r\n    return new Promise((resolve, reject) => {\r\n        var success = planetArray != undefined;\r\n        success ? resolve(planetArray) : reject('Query failed');\r\n    })\r\n  } \r\n  \r\n  const setStars = (arr,data) => {\r\n    const star = arr.TD\r\n    const propPlanet =\r\n      {\r\n        hostname: data,\r\n        st_spectype: star[0],\r\n        st_teff: star[1],\r\n        st_rad: star[2],\r\n        st_mass: star[3],\r\n        st_age: star[4],\r\n        st_rotp: star[5]\r\n      }\r\n    return propPlanet\r\n  }\r\n\r\n  \r\n  console.log('info systeemi', system)\r\n\r\n  return (\r\n    <ImageBackground style={styles.container} source={require('../../assets/background.png')} >\r\n    <View style={styles.container}>\r\n      {loading\r\n       ? <ImageBackground style={{flex: 1, alignItems: 'center', justifyContent:'flex-end'}} source={require('../../assets/exoView_opening_pic.png')}>\r\n          <ActivityIndicator size='large' color='rgba(255,255,255, 0.4)' />\r\n          <Text style={{padding: 10, marginBottom: 50, color:'rgba(255,255,255, 0.4)'}}>Loading</Text>\r\n          <Text style={{padding: 10,color:'rgba(255,255,255, 0.2)'}}>Eksolaakson tarinoita 2020</Text>\r\n        </ImageBackground>\r\n       :(\r\n      <ScrollView\r\n        horizontal={true}>\r\n          <View style={{ width: screenWidth}}>\r\n            <View style={styles.nameBox}>\r\n              <Text style={styles.name}>{planet.planet.pl_name}</Text>\r\n            </View>\r\n            <View style={styles.infoBox}>\r\n           {/**detaljeet, informaatio datat */}\r\n              <InfoView data={planet.planet}/>\r\n              <TouchableOpacity  style ={styles.visualisationButton} onPress = { () => navigation.navigate('StarSystem', system) }>\r\n                <Text style={styles.buttonText}>Starsystem view</Text>\r\n              </TouchableOpacity>\r\n            </View >\r\n        </View>\r\n        <View style={{ flex: 1, width: screenWidth, marginRight: 10}}>\r\n          <Visualisation planet={planet.planet} />\r\n        </View>\r\n        <View style={{ width: screenWidth}}>\r\n          <Distance eplanet={planet.planet} />\r\n        </View>\r\n      </ScrollView>\r\n      )}\r\n\r\n    </View>  \r\n    </ImageBackground> \r\n  )\r\n}\r\n\r\n//TODO: siisti!\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    //backgroundColor: '#0E1D32',\r\n  },\r\n  nameBox: {\r\n    flex: 0.2,\r\n    flexDirection:'row',\r\n    justifyContent:'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'rgba(82, 113, 255, 0.5)',\r\n    borderWidth:1,\r\n    borderBottomLeftRadius: 30,\r\n    borderBottomRightRadius:30\r\n  },\r\n  infoBox: {\r\n    flex: 0.75,\r\n  }, \r\n  name: {\r\n    fontSize: 23,\r\n    fontWeight: 'bold',\r\n    color: '#ffff',\r\n  },\r\n  visualisationButton: {\r\n    flexDirection: 'row',\r\n    justifyContent:'center',\r\n    backgroundColor:'rgba(82, 113, 255, 0.5)',\r\n    padding: 20,\r\n    marginHorizontal: 10,\r\n    marginTop: 10,\r\n  },\r\n  buttonText:{\r\n    color:'white',\r\n    //fontWeight:'bold',\r\n    fontSize: 18\r\n  }\r\n})\r\n\r\nexport default Information;"]},"metadata":{},"sourceType":"module"}